buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.standardout:gradle-eclipseconfig:1.1.1'
  }
}

plugins {
  id 'groovy'
  id 'application'
  id 'maven-publish'
  //id 'osgi' // discontinued - do we need it?
  id 'com.bmuschko.docker-java-application' version '3.6.2'
  id "nebula.ospackage-application" version "9.1.1"
  id 'org.ajoberstar.grgit' version '1.5.0'
}

apply plugin: 'org.standardout.eclipseconfig'

sourceCompatibility = '1.8'

group = 'to.wetransform'

project.ext {
  haleVersion = '5.1.0-SNAPSHOT'
  groovyVersion = '2.5.19'
}

version = '5.1.0-SNAPSHOT'

/*
 * Dependencies
 */

repositories {
  // mavenLocal() //XXX for testing

  maven { // wetransform release repository (HALE releases and Eclipse dependencies)
    url 'https://artifactory.wetransform.to/artifactory/libs-release-local'
  }
  maven { // wetransform snapshot repository (HALE snapshots)
    url 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local'
  }

  // this needs to be defined before jcenter/MavenCentral for retrieving JAI
  maven {
    url 'https://repo.osgeo.org/repository/release/'
  }

  maven { // HALE artifactory (dependencies for HALE)
    url 'https://artifactory.wetransform.to/artifactory/ext-release-local'
  }

  mavenCentral()
}

configurations {
  // exclude Saxon9 custom dependency by schema-utils (schematron validation)
  implementation.exclude group: 'org.opengis.cite.saxon', module: 'saxon9'
}

dependencies {
  // HALE

  // CLI API, utilities and default commands
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.util.cli:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.cli:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.app.cli.commands:$haleVersion"

  implementation "org.codehaus.groovy:groovy-all:$groovyVersion"

  // core
  implementation 'eu.esdihumboldt.unpuzzled:org.eclipse.equinox.nonosgi.registry:1.0.0'
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.core:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.align.groovy:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.align.merge:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.referencing:$haleVersion"

  // transformation
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.app.transform:$haleVersion"
  // needed to run successfully:
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.headless.orient:$haleVersion" // reiterable transformation sink (for WFS FeatureCollection)
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.propertyaccessor:$haleVersion" // for CQL filters to work
  // transformation functions:
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.core:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.inspire:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.geometric:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.groovy:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.groovy.helpers:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.numeric:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.string:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.custom:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.cst.functions.collector:$haleVersion"

  // formats
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.xml:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.xsd:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.gml:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.shp:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.csv:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.wfs:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.json:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.xls:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.geopackage:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.html.svg:$haleVersion"

  // database support
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.jdbc:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.jdbc.postgresql:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.jdbc.mssql:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.jdbc.msaccess:$haleVersion"

  // hale connect
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.haleconnect:$haleVersion"

  // code list formats
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.codelist.xml:$haleVersion"

  // Schematron validation
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.io.schematron:$haleVersion"
  // replacement for omitted Saxon dependency
  // tested w/ schematron validation in https://github.com/wetransform/exp-schematron/tree/exp/saxon-he
  implementation 'net.sf.saxon:Saxon-HE:9.7.0-20'

  // converters
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.convert.core:$haleVersion"
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.common.convert.wkt:$haleVersion"

  // Groovy meta extensions
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.util.groovy.meta.extension:$haleVersion"

  // logging
  implementation(group: 'eu.esdihumboldt.unpuzzled', name: 'de.fhg.igd.slf4jplus.logback.appender', version: '1.2.0.201503311443')
  implementation 'org.slf4j:jul-to-slf4j:1.7.21'

  // resource cache
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource', version: haleVersion)
  def resourcesVersion = '2022.8.16'
  // OpenGIS schemas, INSPIRE schemas, W3C schemas, etc.
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.opengis.net', version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.inspire', version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.portele.de', version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.w3.org', version: resourcesVersion)
  // INSPIRE code lists and feature concepts
  implementation(group: 'eu.esdihumboldt.hale',
    name: 'eu.esdihumboldt.util.resource.codelists.inspire',
    version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale',
    name: 'eu.esdihumboldt.util.resource.codelists.inspire.accept-xml',
    version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale',
    name: 'eu.esdihumboldt.util.resource.featureconcepts.inspire',
    version: resourcesVersion)
  // More resources
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.adv-online.de', version: resourcesVersion)
  implementation(group: 'eu.esdihumboldt.hale', name: 'eu.esdihumboldt.util.resource.schemas.xplanung.de', version: resourcesVersion)

  // user / customer specific
  implementation "eu.esdihumboldt.hale:eu.esdihumboldt.hale.adv.merge:$haleVersion"

  // CLI
  implementation 'commons-cli:commons-cli:1.5.0'
  // Groovy Shell
  implementation 'jline:jline:2.13'

  // Testing
  testImplementation 'junit:junit:4.12'
  testImplementation 'com.github.stefanbirkner:system-rules:1.16.0'
}

configurations.all {
  // ensure SNAPSHOTs are updated every time if needed
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

mainClassName = 'to.wetransform.halecli.CLI'
applicationName = 'hale'
applicationDefaultJvmArgs = [
  '-Dcache.level1.enabled=false',
  '-Dcache.level1.size=0',
  '-Dcache.level2.enabled=false',
  '-Dcache.level2.size=0'
]

/*
 * plugin.xml and OSGi manifest
 *
 * For the plugin.xml file to be recognised there must be an
 * OSGi manifest. In the resources is a dummy file that is required
 * for tests and execution from within Eclipse or Gradle.
 * In the build Jar, the manifest file is overriden.
 */
jar {
  manifest {
    attributes 'Bundle-SymbolicName': 'to.wetransform.halecli;singleton:=true',
      'Bundle-Vendor': 'wetransform GmbH'
  }
}

/*
 * OS packaging
 */

ospackage {
  packageName = 'hale-cli'

  link("/usr/local/bin/$applicationName", "/opt/$applicationName/bin/$applicationName")
  link("/etc/bash_completion.d/hale", "/opt/$applicationName/etc/bash_completion.sh")
}

ospackage_application {
  prefix = "/opt"
}

distributions {
  main {
    contents {
      from(file('etc')) {
        into 'etc'
      }
    }
  }
}

/*
 * Docker configuration
 * see https://github.com/bmuschko/gradle-docker-plugin
 */

docker {
  javaApplication {
    baseImage = 'openjdk:8-jre-slim'
    maintainer = 'Simon Templer "simon@wetransform.to"'
    tag = "wetransform/${project.name}:${project.version}"
  }

  url = project.hasProperty('dockerHost') ? dockerHost : 'http://localdocker:2375'

  registryCredentials {
    url = 'https://index.docker.io/v1/'
    username = project.hasProperty('dockerHubUsername') ? dockerHubUsername : ''
    password = project.hasProperty('dockerHubPassword') ? dockerHubPassword : ''
    email = project.hasProperty('dockerHubEmail') ? dockerHubEmail : ''
  }
}

dockerPushImage {
  // workaround for wrong image name used when pushing to docker hub
  imageName = project.tasks.dockerBuildImage.getTag().split(':')[0]
  tag = project.tasks.dockerBuildImage.getTag().split(':')[1]
}

dockerDistTar {
  def buildTime = java.time.ZonedDateTime.now().format(java.time.format.DateTimeFormatter.ISO_INSTANT);
  label('git.sha': grgit.head().id, 'git.branch': grgit.branch.current.name, 'build.version': version, 'build.time': buildTime)
}

// "latest" tag

task dockerTagLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerTagImage,
    dependsOn: dockerBuildImage) {
  imageId = "wetransform/${project.name}:${project.version}"
  repository = "wetransform/${project.name}"
  tag = 'latest'
}

task dockerPushLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage,
    dependsOn: dockerTagLatest) {
  imageName = "wetransform/${project.name}"
  tag = 'latest'
}

/*
 * Packaging and publishing
 */

// package groovydoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'groovydoc') {
  from groovydoc.destinationDir
  classifier = 'javadoc'
}

// groovydoc task work-around
configurations {
  jansi.extendsFrom(runtime)
}
groovydoc {
  groovyClasspath = project.configurations.jansi
}
dependencies {
  jansi 'org.fusesource.jansi:jansi:1.11'
}

// package source into a jar file
task packageSources(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact packageSources
      artifact packageJavadoc
    }
  }

  repositories {
    maven {
      url = project.version.endsWith('-SNAPSHOT') ?
        'https://artifactory.wetransform.to/artifactory/libs-snapshot-local' :
        'https://artifactory.wetransform.to/artifactory/libs-release-local'
      credentials {
        username project.hasProperty('wetfArtifactoryUser') ? wetfArtifactoryUser : ''
        password project.hasProperty('wetfArtifactoryPassword') ? wetfArtifactoryPassword : ''
      }
    }
  }
}

// exclude distZip ands distTar artifacts
/*FIXME update for current Gradle version
configurations.archives.with {
  artifacts.remove artifacts.find { it.archiveTask.is distZip }
  artifacts.remove artifacts.find { it.archiveTask.is distTar }
}
*/

// Workaround for gradle application plugin 'the input line is too long' error on Windows
// see https://gist.github.com/jlmelville/2bfe9277e9e2c0ff79b6
tasks.withType(CreateStartScripts).each { task ->
  task.doLast {
    String text = task.windowsScript.text
    text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, { "${it[1]}*" })
    task.windowsScript.write text
  }
}

/*
 * Gradle wrapper
 */
wrapper {
  gradleVersion = '7.6.1'
}
